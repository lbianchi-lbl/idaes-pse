name: Integration tests

on:
  # for the moment, this workflow needs to be triggered manually
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git hash (optional)
        required: false
  repository_dispatch:
    # to run this, send a POST API call at repos/IDAES/idaes-pse/dispatches with the specified event_type
    # e.g. `gh repos/IDAES/idaes-pse/dispatches -F event_type=integration_tests_requested`
    types: [integration_tests_requested]
  schedule:
    # run daily at 5:00 am UTC (12 am ET/9 pm PT)
    - cron: '0 5 * * *'
  pull_request_review:
    types:
      - submitted
      # FIXME "edited" is convenient for testing, but could end up triggering too often if left in production
      - edited

defaults:
  run:
    shell: bash

jobs:
  check-trigger:
    name: Check trigger event
    runs-on: ubuntu-latest
    outputs:
      decision: ${{ steps.get-run-or-skip.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - name: Decide if to run or skip rest of the workflow
        id: get-run-or-skip
        uses: actions/github-script@master
        with:
          result-encoding: string
          script: |
            var shouldRun = null;
            const isPRReview = context.eventName == 'pull_request_review';
            if (isPRReview) {
              const getCountApproved = require(`${process.env.GITHUB_WORKSPACE}/.github/scripts/countApproved.js`);
              const countApproved = await getCountApproved({
                github: github,
                owner: context.repo.owner,
                repo: context.repo.repo,
                pullNumber: context.payload.pull_request.number,
              });
              const isApproved = countApproved >= 2;
              shouldRun = isApproved;
            } else {
              shouldRun = true;
            }
            const decision = shouldRun ? 'run' : 'skip';
            console.log(`decision: ${decision}`);
            return decision;
  debug-check-trigger:
    name: Debug info from check-trigger job
    needs: check-trigger
    runs-on: ubuntu-latest
    steps:
      - name: Display debug info
        run: |
          echo '${{ toJSON(needs) }}'
          echo '${{ needs.check-trigger.outputs.decision }}'
          echo '${{ needs.check-trigger.outputs.decision == 'run' }}'
          echo '${{ needs.check-trigger.outputs.decision == 'skip' }}'
  run-integration:
    needs: check-trigger
    if: needs.check-trigger.outputs.decision == 'run'
    name: Integration tests (py${{ matrix.python-version }}/${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      # if fail-fast == true (the default), jobs for the remaining values in the matrix are cancelled
      fail-fast: false
      matrix:
        python-version:
          - '3.6'
          - '3.7'
        os:
          - ubuntu-18.04
          - windows-latest
        include:
          - os: ubuntu-18.04
            python-version: '3.7'
            upload-coverage: true
    steps:
      - name: Display debug info
        run: |
          echo '${{ toJSON(needs) }}'
          echo '${{ toJSON(matrix) }}'
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install idaes and dependencies
        run: |
          python -m pip install --progress-bar off --upgrade pip setuptools wheel
          python -m pip install --progress-bar off -r requirements-dev.txt
          idaes --version
      - name: Install extensions
        run: |
          idaes get-extensions --verbose
          find $(idaes data-directory) -ls
          # add bin directory to $PATH (only valid for subsequent steps)
          echo "$(idaes bin-directory)" >> $GITHUB_PATH
      - name: Test access to executables
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
              ipopt.exe -v
          else
              ipopt -v
          fi
      - name: Run idaes-pse integration tests
        if: '!matrix.upload-coverage'
        run: |
          pytest -m integration idaes/
      - name: Run complete test suite with coverage report
        if: matrix.upload-coverage
        run: |
          pytest -c pytest.ini idaes/ --cov
      - name: Create test coverage report (Codecov)
        if: matrix.upload-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          bash <(curl -s https://codecov.io/bash)
      - name: Fetch examples-pse
        run: |
          git clone https://github.com/IDAES/examples-pse.git
      - name: Run examples-pse tests
        run: |
          cd examples-pse
          pytest

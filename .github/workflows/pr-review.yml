name: PR review

on:
  pull_request_review:
    types:
      - submitted

jobs:
  check-approved:
    name: Check if PR is approved
    runs-on: ubuntu-latest
    steps:
      - name: Check reviews for approval
        id: check-approved
        uses: actions/github-script@master
        with:
          script: |
            const ReviewState = {
              dismissed: "DISMISSED",
              approved: "APPROVED",
            };
            const minCountApproved = 2;
            const specialReviewer = 'idaes-build';
            const reviewEvent = context.payload;
            const pullRequest = reviewEvent.pull_request;

            // check count of approved reviews after selecting latest for each reviewer
            function selectLatestPerUser(reviews) {
              const latestByUser = {};
              reviews.forEach((r) => {
                // the reviews are in chronological order (earliest to latest)
                // so to get the latest for each user we can use an Object as a map and loop over all reviews
                // at each iteration, a more recent review for that user will replace an earlier one set before it
                latestByUser[r.user.login] = r;
              });
              return Object.values(latestByUser);
            }
            const {data: allReviews} = await github.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequest.number,
            });
            const latestReviews = selectLatestPerUser(allReviews);
            console.log(`There are ${latestReviews.length} up-to-date reviews from unique reviewers.`);

            const countApproved = latestReviews.filter(r => r.state === ReviewState.approved).length;
            console.log(`${countApproved} approving reviews (at least ${minCountApproved} required).`);
            const isApproved = countApproved >= minCountApproved;
            console.log(`Approved: ${isApproved}`);
            core.setState('is-approved', isApproved);
            return isApproved;

      - name: Sync approval label with PR approved reviews
        uses: actions/github-script@master
        with:
          github-token: ${{ secrets.IDAES_BUILD_TOKEN }}
          script: |
            const pullRequest = context.payload.pull_request;
            function ensureLabelPresence({labelName, shouldBePresent}) {
              const commonArgs = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pullRequest.number,
              };
              const {data: labels} = await github.issues.listLabelsOnIssue({
                ...commonArgs
              });
              const isPresent = labels.filter(label => label.name === labelName).length == 1;
              const msg = `Label ${labelName} is ${isPresent ? "" : "not"} present, when it should ${shouldBePresent ? "": "not"} be present.`
              console.log(msg);
              const alreadyPresent = shouldBePresent && isPresent;
              const needsAdding = shouldBePresent && !isPresent;
              const needsRemoving = !shouldBePresent && isPresent;
              const alreadyAbsent = !shouldBePresent && !isPresent;
              if (needsAdding) {
                console.log(`Label ${labelName} will be added.`);
                await github.issues.addLabels({
                  ...commonArgs,
                  labels: [labelName]
                });
              } else if (needsRemoving) {
                console.log(`Label ${labelName} will be removed.`);
                await github.issues.removeLabel({
                  ...commonArgs,
                  name: labelName,
                })
              } else if (alreadyPresent || alreadyAbsent) {
                console.log(`Label ${labelName} is already in desired state, no further action needed.`);
              }
            }
            const isApproved = core.getState('is-approved');
            const labelName = "ci:approved";
            await ensureLabelPresence({
              labelName: labelName,
              shouldBePresent: isApproved,
            });

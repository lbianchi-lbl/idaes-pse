name: PR review

on:
  pull_request_review:
    types:
      - submitted

jobs:
  decide:
    name: Decide if integration tests should be run
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check-reviews.outputs.result }}
    steps:
      - name: Check reviews to see if tests should run
        id: check-reviews
        uses: actions/github-script@master
        with:
          script: |
            const ReviewState = {
              dismissed: "DISMISSED",
              approved: "APPROVED",
            };
            const minCountApproved = 2;
            const specialReviewer = 'idaes-build';
            const reviewEvent = context.payload;
            const pullRequest = reviewEvent.pull_request;
            // current review, i.e. the one triggering the workflow
            const review = reviewEvent.review;

            // check if current review was submitted by special reviewer
            const submittedBy = reviewEvent.sender.login;
            console.log(`Review submitted by: ${submittedBy}`)
            const submittedBySpecialReviewer = submittedBy === specialReviewer;
            console.log(`Review was submitted by special reviewer ${specialReviewer}: ${submittedBySpecialReviewer}`);

            // check if special reviewer is mentioned in body of current review
            const reviewBody = review.body || '';
            console.log(`Body of the review: "${reviewBody}"`);
            // this could be made more specific, e.g. requiring @-mentioning or additional keywords
            const isSpecialText = text => text.includes(specialReviewer);
            const hasSpecialText = isSpecialText(reviewBody);
            console.log(`Review has special text: ${hasSpecialText}.`);

            // check if special reviewer is among the requested reviewer for this PR (independently from the current review)
            const reqReviewers = pullRequest.requested_reviewers;
            console.log(reqReviewers);
            const requestedSpecialReviewer = reqReviewers.some(user => user.login == specialReviewer);
            console.log(`Special reviewer ${specialReviewer} is requested: ${requestedSpecialReviewer}`);

            // check count of approved reviews after selecting latest for each reviewer
            function selectLatestPerUser(reviews) {
              const latestByUser = {};
              reviews.forEach((r) => {
                // the reviews are in chronological order (earliest to latest)
                // so to get the latest for each user we can use an Object as a map and loop over all reviews
                // at each iteration, a more recent review for that user will replace an earlier one set before it
                latestByUser[r.user.login] = r;
              });
              return Object.values(latestByUser);
            }
            const {data: allReviews} = await github.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequest.number,
            });
            const latestReviews = selectLatestPerUser(allReviews);
            console.log(`There are ${latestReviews.length} up-to-date reviews from unique reviewers.`);

            const countApproved = latestReviews.filter(r => r.state === ReviewState.approved).length;
            console.log(`${countApproved} approving reviews (at least ${minCountApproved} required).`);

            // if any of these conditions is fulfilled, the tests should run
            // we could in principle save some time with early return on true for each condition instead of calculating all of them
            const verdict = (
              countApproved >= minCountApproved
              || submittedBySpecialReviewer
              || hasSpecialText
              || requestedSpecialReviewer
            );
            console.log(`Should run: ${verdict}`);
            return verdict;
  check-skip:
    name: Check if dependent jobs can be skipped
    runs-on: ubuntu-latest
    needs: [decide]
    if: contains(needs.decide.outputs.should-run, 'true')
    steps:
      - name: Display info
        run: echo "Dependent jobs will not be skipped based on this job"
  pytest-integration:
    name: Integration tests (py${{ matrix.python-version }}/${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [check-skip]
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.6'
          - '3.7'
        os:
          - ubuntu-18.04
          - windows-latest
    steps:
      - name: Display debug info
        run: |
          echo '${{ toJSON(matrix) }}'
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up idaes
        uses: ./.github/actions/setup-idaes
        with:
          install-target: '.'
      - name: Run pytest (integration)
        run: |
          pytest -m integration
  pytest-coverage:
    name: Run pytest with coverage report
    runs-on: ubuntu-latest
    needs: [check-skip]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Set up idaes
        uses: ./.github/actions/setup-idaes
        with:
          install-target: -r requirements-dev.txt
      - name: Run pytest (complete) with cov
        run: |
          pytest --cov
      - name: Upload coverage report to Codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          bash <(curl -s https://codecov.io/bash)

name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    types:
      # when PR is opened not in draft mode, or when it's taken out of draft mode
      - ready_for_review
      # push to PR branch
      - synchronize
      - review_requested
  pull_request_review:
    types:
      - submitted
      # FIXME "edited" is convenient for testing, but we'll have to see if it couldn't end up being triggered too often
      - edited
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git hash (optional)
        required: false
  repository_dispatch:
    # to run this, send a POST API call at repos/IDAES/idaes-pse/dispatches with the specified event_type
    # e.g. `gh repos/IDAES/idaes-pse/dispatches -F event_type=integration_tests_requested`
    types: [run_tests]
  schedule:
    # run daily at 5:00 am UTC (12 am ET/9 pm PT)
    - cron: '0 5 * * *'

defaults:
  run:
    shell: bash

jobs:
  check-integration:
    name: Check if integration tests should be run
    runs-on: ubuntu-latest
    if: contains('[submitted, review_requested]', github.event.action)
    outputs:
      is-pr-approved: ${{ steps.get-count-approved.outputs.result >= 2 }}
    steps:
      - name: Check if has required number of approved reviews
        id: get-count-approved
        if: github.event.action == 'submitted'
        uses: actions/github-script@master
        with:
          script: |
            const ReviewState = {
              dismissed: "DISMISSED",
              approved: "APPROVED",
            };

            function selectLatestPerUser(reviews) {
              const latestByUser = {};
              reviews.forEach((r) => {
                // the reviews are in chronological order (earliest to latest)
                // so to get the latest for each user we can use an Object as a map and loop over all reviews
                // at each iteration, a more recent review for that user will replace an earlier one set before it
                latestByUser[r.user.login] = r;
              });
              return Object.values(latestByUser);
            }

            const {data: reviews} = await github.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.pull_request.number,
            });
            const latestReviews = selectLatestPerUser(reviews);
            console.log(`There are ${latestReviews.length} up-to-date reviews from unique reviewers.`);
            const countApproved = latestReviews.filter(r => r.state === ReviewState.approved).length;
            console.log(`${countApproved} approving reviews.`);
            return countApproved;
      - name: Check if a review from idaes-build was requested
        if: always() && ((github.event.requested_reviewer || {}).login == 'idaes-build')
        run: |
          echo "The requested reviewer was idaes-build"
  check-rapid:
    name: Check if rapid tests should be run
    runs-on: ubuntu-latest
    if: contains('[ready_for_review, synchronize]', github.event.action)
    steps:
      - name: Display debug information
        run: |
          echo "Rapid tests will be run"
  pytest-rapid:
    name: Tests (rapid/py${{ matrix.python-version }}/${{ matrix.os }})
    needs: [check-rapid]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.6'
          - '3.7'
        os:
          - ubuntu-18.04
          - windows-latest
    steps:
      - name: Display debug info
        run: |
          echo '${{ toJSON(needs) }}'
          echo '${{ toJSON(matrix) }}'
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up idaes
        uses: ./.github/actions/setup-idaes
        with:
          install-target: '.'
      - name: Run pytest (not integration)
        run: |
          pytest -m 'not integration'
  pytest-integration:
    name: Tests (integration/py${{ matrix.python-version }}/${{ matrix.os }})
    needs: [check-integration]
    if: contains(needs.check-integration.outputs.is-pr-approved, 'true')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.6'
          - '3.7'
        os:
          - ubuntu-18.04
          - windows-latest
    steps:
      - name: Display debug info
        run: |
          echo '${{ toJSON(needs) }}'
          echo '${{ toJSON(matrix) }}'
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up idaes
        uses: ./.github/actions/setup-idaes
        with:
          install-target: '.'
      - name: Run pytest (integration)
        run: |
          pytest -m integration
  build-docs:
    name: Build Sphinx docs
    needs: [check-rapid]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Set up idaes
        uses: ./.github/actions/setup-idaes
        with:
          install-target: -r requirements-dev.txt
      - name: Build Sphinx docs (HTML)
        run: |
          cd docs/
          python build.py
      - name: Publish built docs
        uses: actions/upload-artifact@v2
        with:
          name: idaes-pse-docs-html
          path: docs/build/html/
          retention-days: 7
  pylint:
    name: pylint (errors only)
    needs: [check-rapid]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Set up idaes
        uses: ./.github/actions/setup-idaes
        with:
          # TODO pylint version will have to be pinned
          install-target: pylint -r requirements.txt
      - name: Run pylint
        run: |
          pylint -E --ignore-patterns="test_.*" idaes || true


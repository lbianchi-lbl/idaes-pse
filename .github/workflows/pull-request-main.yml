name: Pull request (main) CI tests

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git hash (optional)
        required: false

defaults:
  run:
    shell: bash

jobs:
  run-tests:
    name: Install and test (py${{ matrix.python-version }}/${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      # if fail-fast == true (the default), jobs for the remaining values in the matrix are cancelled
      fail-fast: false
      matrix:
        python-version:
          - '3.6'
          - '3.7'
        os:
          - ubuntu-18.04
          - windows-latest
        include:
          - os: ubuntu-18.04
            python-version: '3.7'
            upload-coverage: true
    steps:
      - name: Display debug info
        run: |
          echo '${{ toJSON(matrix) }}'
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install IDAES with dev dependencies
        run: |
          python -m pip install --progress-bar off pip setuptools wheel
          python -m pip install --progress-bar off -r requirements-dev.txt
      - name: Display IDAES version
        run: |
          idaes --version
      - name: Install IDAES extensions
        run: |
          idaes get-extensions --verbose
          # TODO: these commands are Unix-shell specific 
          # and will need to be changed if we want to test on CMD.exe/Powershell
          find $(idaes data-directory) -ls
          # add bin directory to $PATH (only valid for subsequent steps)
          echo "$(idaes bin-directory)" >> $GITHUB_PATH
      - name: Test access to executables
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
              ipopt.exe -v
          else
              ipopt -v
          fi
      - name: Run tests (excl. integration)
        if: '!matrix.upload-coverage'
        run: |
          pytest -c pytest.ini -m 'not integration' idaes/
      # instead of running tests in a separate job to create the coverage report,
      # use separate steps to run tests with --cov flag and upload coverage report
      # to be run on a single matrix replica
      - name: Run tests (excl. integration) with coverage report
        if: matrix.upload-coverage
        run: |
          pytest -c pytest.ini -m 'not integration' idaes/ --cov
      - name: Create test coverage report (Codecov)
        if: matrix.upload-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          bash <(curl -s https://codecov.io/bash)
  build-docs:
    name: Build Sphinx docs (HTML)
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Install Sphinx dependencies
      run: |
        # idaes and the modules in idaes.__init__ are imported when accessing idaes.ver
        python -m pip --no-cache-dir install --progress-bar off pip setuptools wheel
        python -m pip --no-cache-dir install --progress-bar off -r requirements-dev.txt
    - name: Install IDAES extensions
      run: |
        idaes get-extensions --verbose
        find $(idaes data-directory) -ls
        # add bin directory to $PATH (only valid for subsequent steps)
        echo "$(idaes bin-directory)" >> $GITHUB_PATH
    - name: Test access to executables
      run: |
        ipopt -v
    - name: Build Sphinx docs
      run: |
        cd docs/
        python build.py
    - name: Publish built docs
      uses: actions/upload-artifact@v2
      with:
        name: idaes-pse-docs-html
        path: docs/build/html/
        retention-days: 7
  pylint:
    name: Run pylint (errors only)
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Install pylint dependencies
      run: |
        # TODO pylint and astroid versions will need to be pinned
        python -m pip --no-cache-dir install --progress-bar off pip setuptools wheel
        python -m pip --no-cache-dir install --progress-bar off pylint
        # in general the package being pylinted does not need to be installed to run pylint on it
        # but in our case the pylint plugin needs to be able to import some code from idaes and pyomo
        python -m pip --no-cache-dir install --progress-bar off -r requirements.txt
    - name: Run pylint
      run: |
        pylint -E --ignore-patterns="test_.*" idaes || true

